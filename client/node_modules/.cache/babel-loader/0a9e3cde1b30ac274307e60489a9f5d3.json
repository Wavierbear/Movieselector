{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\benja\\\\Desktop\\\\app2000\\\\APP2000MovieSelector\\\\client\\\\src\\\\components\\\\Film\\\\MoviePref.js\",\n    _s = $RefreshSig$();\n\nimport { Col, Form, Button } from \"react-bootstrap\";\nimport { useState, useEffect } from \"react\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Typography from \"@material-ui/core/Typography\";\nimport axios from \"axios\";\nimport { useSelector } from \"react-redux\";\nimport MoviePoster from \"./MoviePoster\";\n/*\r\n    Forfatter: Benjamin Nese\r\n    Preferanse for hver bruker over hvilken kategori, år, og rating de vil se filmer fra\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MoviePref = () => {\n  _s();\n\n  const [key, setKey] = useState(\"67eebbe4966f8175133a6a20f9206e7a\");\n  const [language, setLanguage] = useState(\"en-US\");\n  const [sort, setSort] = useState(\"popularity.desc\");\n  const [year, setYear] = useState([1985, 2021]); // new Date(1995, 11, 17).toISOString().slice(0, 10), new Date(2021, 11, 17).toISOString().slice(0, 10)\n\n  const [rating, setRating] = useState([0, 10]);\n  const [pref, setPref] = useState([]);\n  const [moviePoster, setMoviePoster] = useState([]); //TODO sorter liste lokalt istendenfor via url\n  //Concat en link med de forskjellige preferansene endret, her skulle vi ha implementert en bedre løsning\n\n  let url = `https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=${language}&sort_by=${sort}&include_adult=false&include_video=false&page=1&release_date.gte=${year[0]}-01-01&release_date.lte=${year[1]}-01-01&vote_count.gte=500&vote_average.gte=${rating[0]}&vote_average.lte=${rating[1]}&with_genres=${pref}`;\n  useEffect(() => {\n    console.log(url); //hent ut år\n\n    axios.get(url).then(res => {\n      console.log(res.data.results.map(movie => {\n        return movie.title + movie.vote_average;\n      }));\n      setMoviePoster(res.data.results.map(name => {\n        return /*#__PURE__*/_jsxDEV(MoviePoster, {\n          movie: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 18\n        }, this);\n      }));\n    });\n  }, [rating]); //hver gang rating endres vil listen oppdateres\n\n  const reduxState = useSelector(state => state.auth); //hente state fra store\n  // useDispatch() for oppdatere\n\n  const onCheckedGenre = value => {\n    console.log(value);\n\n    if (!pref.includes(value)) {\n      //hvis preferanse allerede er i state\n      setPref([...pref, value]);\n    }\n  };\n\n  const onSavePref = e => {\n    e.preventDefault(); //Vil unngå at nettleser automatisk lastest på nytt\n\n    console.log(reduxState.epost);\n    const preferanse = {\n      //Opprett ny variabel som blir et database objekt\n      userId: reduxState.epost,\n      //looper gjennom alle preferansene\n      genres: pref.map(pre => {\n        return {\n          name: `${pre}`\n        };\n      }),\n      years: year.map(year => {\n        return {\n          year: `${year}`\n        };\n      }),\n      ratings: rating.map(rating => {\n        return {\n          rating: `${rating}`\n        };\n      })\n    }; //Ny preferanse blir lastet opp til databasen via axios\n\n    console.log(\"kjører axios \", axios.post(\"http://localhost:3000/movie_pref/add\", preferanse)); //Skulle her ha lagt inn en sjekk for om bruker har preferanse inne, for så å heller oppdatert den\n\n    axios.post(\"http://localhost:3000/movie_pref/add\", preferanse).then(res => {\n      console.log(preferanse);\n      console.log(\"fra moviepref.js: \", res);\n    });\n    alert(\"Lagret\"); //window.location ='/'; //sender bruker tilbake når trykket lagre\n  }; //Test for å hente ut preferansene fra mongoDB\n  //TODO Funker ikke\n\n\n  const hent = e => {\n    e.preventDefault();\n    axios.get(`http://localhost:3000/movie_pref/${reduxState.epost}`).then(res => {\n      for (var i = 0; i < res.data.genres.length; i++) document.getElementById(res.data.genres[i].name).checked = true; //Setter alle filmpref fra\n      //mongoDB til gui\n\n\n      setRating(res.data.ratings.map(rating => rating.rating));\n      setYear(res.data.years.map(year => year.year));\n    });\n  }; //Test for å hente alle filmprefeanser i databasen\n\n\n  const hentAlle = () => {\n    axios.get(`http://localhost:3000/movie_pref`).then(res => {\n      console.log(\"kjører hentalle\");\n      console.log(res.data);\n    });\n  };\n\n  const slettAlle = () => {\n    axios.get();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-2 mb-5 bg-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center\",\n      children: \"Film Preferanse\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            defaultValue: \"Popularity Desecending\",\n            onChange: e => setSort(e.target.options[e.target.options.selectedIndex].value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"popularity.desc\",\n              children: \"Popularity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"vote_average.desc\",\n              children: \"Rating\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"release_date.desc\",\n              children: \"Release Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n        className: \"m-2\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"checkbox\",\n          label: \"Action\",\n          id: \"28\",\n          value: \"28\",\n          onChange: e => onCheckedGenre(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"checkbox\",\n          label: \"Adventure\",\n          id: \"12\",\n          value: \"12\",\n          onChange: e => onCheckedGenre(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"checkbox\",\n          label: \"Animation\",\n          id: \"16\",\n          value: \"16\",\n          onChange: e => onCheckedGenre(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n        className: \"m-2\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"checkbox\",\n          label: \"Comedy\",\n          id: \"35\",\n          value: \"35\",\n          onChange: e => onCheckedGenre(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"checkbox\",\n          label: \"Thriller\",\n          id: \"53\",\n          value: \"53\",\n          onChange: e => onCheckedGenre(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"checkbox\",\n          label: \"Romance\",\n          id: \"10749\",\n          value: \"10749\",\n          onChange: e => onCheckedGenre(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        id: \"range-year\",\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Year:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), \" \", year[0], \"-\", year[1]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        style: {\n          width: 300\n        },\n        valueLabelDisplay: \"auto\",\n        \"aria-labelledby\": \"range-year\",\n        value: year,\n        min: 1985,\n        max: 2021,\n        onChange: (e, value) => setYear(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        id: \"range-rating\",\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Rating:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), \" \", rating[0], \"-\", rating[1]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        style: {\n          width: 300\n        },\n        valueLabelDisplay: \"auto\",\n        \"aria-labelledby\": \"range-rating\",\n        value: rating,\n        min: 0,\n        max: 10,\n        onChange: (e, value) => setRating(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: e => onSavePref(e),\n      children: \"lagre\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: e => hent(e),\n      children: \"hent\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"p1\",\n      children: moviePoster[Math.floor(Math.random() * 5)]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MoviePref, \"K/ZEPxoRGthU7ygqGUtYp2n9vgs=\", false, function () {\n  return [useSelector];\n});\n\n_c = MoviePref;\nexport default MoviePref; //TODO FIKS FOKUS PÅ HVILKEN KNAPP, SAMT GENERALISER DE I RANGEBAR\n// const RangeBar =(props) =>{\n//     return(\n//      <div>\n//         <Typography id={props.id}>\n//             <b>{props.title}:</b>\n//         </Typography>\n//         <Slider\n//             style={{width:300}}\n//             valueLabelDisplay=\"auto\"\n//             aria-labelledby=\"year\"\n//             value={props.value}\n//             min={props.min}\n//             max={props.max}\n//             onChange={(e)=>handleChange}\n//          />\n//     </div>\n//     )\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviePref\");","map":{"version":3,"sources":["C:/Users/benja/Desktop/app2000/APP2000MovieSelector/client/src/components/Film/MoviePref.js"],"names":["Col","Form","Button","useState","useEffect","Slider","Typography","axios","useSelector","MoviePoster","MoviePref","key","setKey","language","setLanguage","sort","setSort","year","setYear","rating","setRating","pref","setPref","moviePoster","setMoviePoster","url","console","log","get","then","res","data","results","map","movie","title","vote_average","name","reduxState","state","auth","onCheckedGenre","value","includes","onSavePref","e","preventDefault","epost","preferanse","userId","genres","pre","years","ratings","post","alert","hent","i","length","document","getElementById","checked","hentAlle","slettAlle","target","options","selectedIndex","width","Math","floor","random"],"mappings":"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","sourcesContent":["import { Col, Form, Button } from \"react-bootstrap\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\nimport MoviePoster from \"./MoviePoster\";\r\n\r\n/*\r\n    Forfatter: Benjamin Nese\r\n    Preferanse for hver bruker over hvilken kategori, år, og rating de vil se filmer fra\r\n*/\r\nconst MoviePref = () => {\r\n  const [key, setKey] = useState(\"67eebbe4966f8175133a6a20f9206e7a\");\r\n  const [language, setLanguage] = useState(\"en-US\");\r\n  const [sort, setSort] = useState(\"popularity.desc\");\r\n  const [year, setYear] = useState([1985, 2021]);\r\n  // new Date(1995, 11, 17).toISOString().slice(0, 10), new Date(2021, 11, 17).toISOString().slice(0, 10)\r\n  const [rating, setRating] = useState([0, 10]);\r\n  const [pref, setPref] = useState([]);\r\n  const [moviePoster, setMoviePoster] = useState([]);\r\n\r\n  //TODO sorter liste lokalt istendenfor via url\r\n\r\n  //Concat en link med de forskjellige preferansene endret, her skulle vi ha implementert en bedre løsning\r\n  let url = `https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=${language}&sort_by=${sort}&include_adult=false&include_video=false&page=1&release_date.gte=${year[0]}-01-01&release_date.lte=${year[1]}-01-01&vote_count.gte=500&vote_average.gte=${rating[0]}&vote_average.lte=${rating[1]}&with_genres=${pref}`;\r\n\r\n  useEffect(() => {\r\n    console.log(url); //hent ut år\r\n    axios.get(url).then((res) => {\r\n      console.log(\r\n        res.data.results.map((movie) => {\r\n          return movie.title + movie.vote_average;\r\n        })\r\n      );\r\n      setMoviePoster(\r\n        res.data.results.map((name) => {\r\n          return <MoviePoster movie={name}></MoviePoster>;\r\n        })\r\n      );\r\n    });\r\n  }, [rating]); //hver gang rating endres vil listen oppdateres\r\n\r\n  const reduxState = useSelector((state) => state.auth); //hente state fra store\r\n  // useDispatch() for oppdatere\r\n\r\n  const onCheckedGenre = (value) => {\r\n    console.log(value);\r\n    if (!pref.includes(value)) {\r\n      //hvis preferanse allerede er i state\r\n      setPref([...pref, value]);\r\n    }\r\n  };\r\n\r\n  const onSavePref = (e) => {\r\n    e.preventDefault(); //Vil unngå at nettleser automatisk lastest på nytt\r\n    console.log(reduxState.epost);\r\n    const preferanse = {\r\n      //Opprett ny variabel som blir et database objekt\r\n      userId: reduxState.epost,\r\n      //looper gjennom alle preferansene\r\n      genres: pref.map((pre) => {\r\n        return { name: `${pre}` };\r\n      }),\r\n      years: year.map((year) => {\r\n        return { year: `${year}` };\r\n      }),\r\n      ratings: rating.map((rating) => {\r\n        return { rating: `${rating}` };\r\n      }),\r\n    };\r\n\r\n    //Ny preferanse blir lastet opp til databasen via axios\r\n    console.log(\r\n      \"kjører axios \",\r\n      axios.post(\"http://localhost:3000/movie_pref/add\", preferanse)\r\n    );\r\n    //Skulle her ha lagt inn en sjekk for om bruker har preferanse inne, for så å heller oppdatert den\r\n    axios\r\n      .post(\"http://localhost:3000/movie_pref/add\", preferanse)\r\n      .then((res) => {\r\n        console.log(preferanse);\r\n        console.log(\"fra moviepref.js: \", res);\r\n      });\r\n\r\n    alert(\"Lagret\");\r\n    //window.location ='/'; //sender bruker tilbake når trykket lagre\r\n  };\r\n\r\n  //Test for å hente ut preferansene fra mongoDB\r\n  //TODO Funker ikke\r\n  const hent = (e) => {\r\n    e.preventDefault();\r\n\r\n    axios\r\n      .get(`http://localhost:3000/movie_pref/${reduxState.epost}`)\r\n      .then((res) => {\r\n        for (var i = 0; i < res.data.genres.length; i++)\r\n          document.getElementById(res.data.genres[i].name).checked = true; //Setter alle filmpref fra\r\n        //mongoDB til gui\r\n        setRating(res.data.ratings.map((rating) => rating.rating));\r\n        setYear(res.data.years.map((year) => year.year));\r\n      });\r\n  };\r\n\r\n  //Test for å hente alle filmprefeanser i databasen\r\n  const hentAlle = () => {\r\n    axios.get(`http://localhost:3000/movie_pref`).then((res) => {\r\n      console.log(\"kjører hentalle\");\r\n      console.log(res.data);\r\n    });\r\n  };\r\n  const slettAlle = () => {\r\n    axios.get();\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-2 mb-5 bg-white\">\r\n      <h1 className=\"text-center\">Film Preferanse</h1>\r\n      <Form>\r\n        <Form.Row>\r\n          <Col>\r\n            <Form.Label>Sort</Form.Label>\r\n            <Form.Control\r\n              as=\"select\"\r\n              defaultValue=\"Popularity Desecending\"\r\n              onChange={(e) =>\r\n                setSort(e.target.options[e.target.options.selectedIndex].value)\r\n              }\r\n            >\r\n              <option value=\"popularity.desc\">Popularity</option>\r\n              <option value=\"vote_average.desc\">Rating</option>\r\n              <option value=\"release_date.desc\">Release Date</option>\r\n            </Form.Control>\r\n          </Col>\r\n        </Form.Row>\r\n        <Form.Row className=\"m-2\">\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Action\"\r\n            id=\"28\"\r\n            value={\"28\"}\r\n            onChange={(e) => onCheckedGenre(e.target.value)}\r\n          />\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Adventure\"\r\n            id=\"12\"\r\n            value={\"12\"}\r\n            onChange={(e) => onCheckedGenre(e.target.value)}\r\n          />\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Animation\"\r\n            id=\"16\"\r\n            value={\"16\"}\r\n            onChange={(e) => onCheckedGenre(e.target.value)}\r\n          />\r\n        </Form.Row>\r\n        <Form.Row className=\"m-2\">\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Comedy\"\r\n            id=\"35\"\r\n            value={\"35\"}\r\n            onChange={(e) => onCheckedGenre(e.target.value)}\r\n          />\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Thriller\"\r\n            id=\"53\"\r\n            value={\"53\"}\r\n            onChange={(e) => onCheckedGenre(e.target.value)}\r\n          />\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Romance\"\r\n            id=\"10749\"\r\n            value={\"10749\"}\r\n            onChange={(e) => onCheckedGenre(e.target.value)}\r\n          />\r\n        </Form.Row>\r\n        {/* <RangeBar \r\n            title=\"Year\" \r\n            id=\"year\" \r\n            min={1985} \r\n            max={2021} \r\n            ref={valgSlider} \r\n            onChange={fokus}\r\n            /> */}\r\n\r\n        <Typography id=\"range-year\">\r\n          <b>Year:</b> {year[0]}-{year[1]}\r\n        </Typography>\r\n        <Slider\r\n          style={{ width: 300 }}\r\n          valueLabelDisplay=\"auto\"\r\n          aria-labelledby=\"range-year\"\r\n          value={year}\r\n          min={1985}\r\n          max={2021}\r\n          onChange={(e, value) => setYear(value)}\r\n        />\r\n        <Typography id=\"range-rating\">\r\n          <b>Rating:</b> {rating[0]}-{rating[1]}\r\n        </Typography>\r\n        <Slider\r\n          style={{ width: 300 }}\r\n          valueLabelDisplay=\"auto\"\r\n          aria-labelledby=\"range-rating\"\r\n          value={rating}\r\n          min={0}\r\n          max={10}\r\n          onChange={(e, value) => setRating(value)}\r\n        />\r\n      </Form>\r\n      <Button onClick={(e) => onSavePref(e)}>lagre</Button>\r\n      <Button onClick={(e) => hent(e)}>hent</Button>\r\n      <div id=\"p1\">{moviePoster[Math.floor(Math.random() * 5)]}</div>\r\n    </div>\r\n  );\r\n};\r\nexport default MoviePref;\r\n\r\n//TODO FIKS FOKUS PÅ HVILKEN KNAPP, SAMT GENERALISER DE I RANGEBAR\r\n\r\n// const RangeBar =(props) =>{\r\n//     return(\r\n//      <div>\r\n//         <Typography id={props.id}>\r\n//             <b>{props.title}:</b>\r\n//         </Typography>\r\n//         <Slider\r\n//             style={{width:300}}\r\n//             valueLabelDisplay=\"auto\"\r\n//             aria-labelledby=\"year\"\r\n//             value={props.value}\r\n//             min={props.min}\r\n//             max={props.max}\r\n//             onChange={(e)=>handleChange}\r\n//          />\r\n//     </div>\r\n//     )\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}