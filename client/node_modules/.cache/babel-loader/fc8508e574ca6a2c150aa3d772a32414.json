{"ast":null,"code":"const fs = require('fs');\n\nconst readline = require('readline');\n\nconst {\n  google\n} = require('googleapis'); // If modifying these scopes, delete token.json.\n\n\nconst SCOPES = ['https://www.googleapis.com/auth/contacts.readonly']; // The file token.json stores the user's access and refresh tokens, and is\n// created automatically when the authorization flow completes for the first\n// time.\n\nconst TOKEN_PATH = 'token.json'; // Load client secrets from a local file.\n\nfs.readFile('credentials.json', (err, content) => {\n  if (err) return console.log('Error loading client secret file:', err); // Authorize a client with credentials, then call the Google Tasks API.\n\n  authorize(JSON.parse(content), listConnectionNames);\n});\n/**\r\n * Create an OAuth2 client with the given credentials, and then execute the\r\n * given callback function.\r\n * @param {Object} credentials The authorization client credentials.\r\n * @param {function} callback The callback to call with the authorized client.\r\n */\n\nfunction authorize(credentials, callback) {\n  const {\n    client_secret,\n    client_id,\n    redirect_uris\n  } = credentials.installed;\n  const oAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0]); // Check if we have previously stored a token.\n\n  fs.readFile(TOKEN_PATH, (err, token) => {\n    if (err) return getNewToken(oAuth2Client, callback);\n    oAuth2Client.setCredentials(JSON.parse(token));\n    callback(oAuth2Client);\n  });\n}\n/**\r\n * Get and store new token after prompting for user authorization, and then\r\n * execute the given callback with the authorized OAuth2 client.\r\n * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.\r\n * @param {getEventsCallback} callback The callback for the authorized client.\r\n */\n\n\nfunction getNewToken(oAuth2Client, callback) {\n  const authUrl = oAuth2Client.generateAuthUrl({\n    access_type: 'offline',\n    scope: SCOPES\n  });\n  console.log('Authorize this app by visiting this url:', authUrl);\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  });\n  rl.question('Enter the code from that page here: ', code => {\n    rl.close();\n    oAuth2Client.getToken(code, (err, token) => {\n      if (err) return console.error('Error retrieving access token', err);\n      oAuth2Client.setCredentials(token); // Store the token to disk for later program executions\n\n      fs.writeFile(TOKEN_PATH, JSON.stringify(token), err => {\n        if (err) return console.error(err);\n        console.log('Token stored to', TOKEN_PATH);\n      });\n      callback(oAuth2Client);\n    });\n  });\n}\n/**\r\n * Print the display name if available for 10 connections.\r\n *\r\n * @param {google.auth.OAuth2} auth An authorized OAuth2 client.\r\n */\n\n\nfunction listConnectionNames(auth) {\n  const service = google.people({\n    version: 'v1',\n    auth\n  });\n  service.people.connections.list({\n    resourceName: 'people/me',\n    pageSize: 10,\n    personFields: 'names,emailAddresses'\n  }, (err, res) => {\n    if (err) return console.error('The API returned an error: ' + err);\n    const connections = res.data.connections;\n\n    if (connections) {\n      console.log('Connections:');\n      connections.forEach(person => {\n        if (person.names && person.names.length > 0) {\n          console.log(person.names[0].displayName);\n        } else {\n          console.log('No display name found for connection.');\n        }\n      });\n    } else {\n      console.log('No connections found.');\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/benja/Desktop/app2000/APP2000MovieSelector/client/src/components/Test.js"],"names":["fs","require","readline","google","SCOPES","TOKEN_PATH","readFile","err","content","console","log","authorize","JSON","parse","listConnectionNames","credentials","callback","client_secret","client_id","redirect_uris","installed","oAuth2Client","auth","OAuth2","token","getNewToken","setCredentials","authUrl","generateAuthUrl","access_type","scope","rl","createInterface","input","process","stdin","output","stdout","question","code","close","getToken","error","writeFile","stringify","service","people","version","connections","list","resourceName","pageSize","personFields","res","data","forEach","person","names","length","displayName"],"mappings":"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","sourcesContent":["const fs = require('fs');\r\nconst readline = require('readline');\r\nconst {google} = require('googleapis');\r\n\r\n// If modifying these scopes, delete token.json.\r\nconst SCOPES = ['https://www.googleapis.com/auth/contacts.readonly'];\r\n// The file token.json stores the user's access and refresh tokens, and is\r\n// created automatically when the authorization flow completes for the first\r\n// time.\r\nconst TOKEN_PATH = 'token.json';\r\n\r\n// Load client secrets from a local file.\r\nfs.readFile('credentials.json', (err, content) => {\r\n  if (err) return console.log('Error loading client secret file:', err);\r\n  // Authorize a client with credentials, then call the Google Tasks API.\r\n  authorize(JSON.parse(content), listConnectionNames);\r\n});\r\n\r\n/**\r\n * Create an OAuth2 client with the given credentials, and then execute the\r\n * given callback function.\r\n * @param {Object} credentials The authorization client credentials.\r\n * @param {function} callback The callback to call with the authorized client.\r\n */\r\nfunction authorize(credentials, callback) {\r\n  const {client_secret, client_id, redirect_uris} = credentials.installed;\r\n  const oAuth2Client = new google.auth.OAuth2(\r\n      client_id, client_secret, redirect_uris[0]);\r\n\r\n  // Check if we have previously stored a token.\r\n  fs.readFile(TOKEN_PATH, (err, token) => {\r\n    if (err) return getNewToken(oAuth2Client, callback);\r\n    oAuth2Client.setCredentials(JSON.parse(token));\r\n    callback(oAuth2Client);\r\n  });\r\n}\r\n\r\n/**\r\n * Get and store new token after prompting for user authorization, and then\r\n * execute the given callback with the authorized OAuth2 client.\r\n * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.\r\n * @param {getEventsCallback} callback The callback for the authorized client.\r\n */\r\nfunction getNewToken(oAuth2Client, callback) {\r\n  const authUrl = oAuth2Client.generateAuthUrl({\r\n    access_type: 'offline',\r\n    scope: SCOPES,\r\n  });\r\n  console.log('Authorize this app by visiting this url:', authUrl);\r\n  const rl = readline.createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout,\r\n  });\r\n  rl.question('Enter the code from that page here: ', (code) => {\r\n    rl.close();\r\n    oAuth2Client.getToken(code, (err, token) => {\r\n      if (err) return console.error('Error retrieving access token', err);\r\n      oAuth2Client.setCredentials(token);\r\n      // Store the token to disk for later program executions\r\n      fs.writeFile(TOKEN_PATH, JSON.stringify(token), (err) => {\r\n        if (err) return console.error(err);\r\n        console.log('Token stored to', TOKEN_PATH);\r\n      });\r\n      callback(oAuth2Client);\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Print the display name if available for 10 connections.\r\n *\r\n * @param {google.auth.OAuth2} auth An authorized OAuth2 client.\r\n */\r\nfunction listConnectionNames(auth) {\r\n  const service = google.people({version: 'v1', auth});\r\n  service.people.connections.list({\r\n    resourceName: 'people/me',\r\n    pageSize: 10,\r\n    personFields: 'names,emailAddresses',\r\n  }, (err, res) => {\r\n    if (err) return console.error('The API returned an error: ' + err);\r\n    const connections = res.data.connections;\r\n    if (connections) {\r\n      console.log('Connections:');\r\n      connections.forEach((person) => {\r\n        if (person.names && person.names.length > 0) {\r\n          console.log(person.names[0].displayName);\r\n        } else {\r\n          console.log('No display name found for connection.');\r\n        }\r\n      });\r\n    } else {\r\n      console.log('No connections found.');\r\n    }\r\n  });\r\n}"]},"metadata":{},"sourceType":"module"}